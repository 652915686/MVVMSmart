package com.wzq.sample.ui.recycler_single_network;import android.annotation.SuppressLint;import android.content.pm.ActivityInfo;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.recyclerview.widget.LinearLayoutManager;import com.afollestad.materialdialogs.DialogAction;import com.afollestad.materialdialogs.MaterialDialog;import com.chad.library.adapter.base.BaseQuickAdapter;import com.scwang.smartrefresh.layout.api.RefreshLayout;import com.scwang.smartrefresh.layout.listener.OnRefreshListener;import com.wzq.mvvmsmart.event.StateLiveData;import com.wzq.mvvmsmart.utils.KLog;import com.wzq.mvvmsmart.utils.ToastUtils;import com.wzq.sample.R;import com.wzq.sample.base.BaseFragment;import com.wzq.sample.bean.DemoBean;import com.wzq.sample.databinding.FragmentNetworkBinding;import com.wzq.sample.utils.MaterialDialogUtils;import com.wzq.sample.utils.TestUtils;import java.util.ArrayList;import java.util.List;/** * 王志强 2019/12/20 * RecyclerView + 请求网络数据 +分页 + StateLiveData控制加载状态（开始加载，加载失败，加载成功，数据解析错误） */public class NetWorkFragment extends BaseFragment<FragmentNetworkBinding, NetWorkViewModel> {    private MAdapter mAdapter;    private List<DemoBean.ItemsEntity> beans = new ArrayList<>();    @SuppressLint("SourceLockedOrientationActivity")    @Override    public void initParam() {        super.initParam();        getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    }    @Override    public int initContentView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        return R.layout.fragment_network;    }    @Override    public int initVariableId() {        return com.wzq.sample.BR.viewModel;    }    @Override    public void initData() {        viewModel.requestNetWork();  //请求网络数据        initRecyclerView();    }    private void initRecyclerView() {        mAdapter = new MAdapter(R.layout.item_single, beans);        binding.setLayoutManager(new LinearLayoutManager(getActivity()));        binding.setAdapter(mAdapter);        mAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {            @Override            public void onItemClick(BaseQuickAdapter adapter, View view, int position) {                ToastUtils.showShort("点击了条目");            }        });        mAdapter.setOnItemLongClickListener(new BaseQuickAdapter.OnItemLongClickListener() {            @Override            public boolean onItemLongClick(BaseQuickAdapter adapter, View view, int position) {                ToastUtils.showShort("长按了条目");                return false;            }        });        mAdapter.setOnItemChildClickListener(new BaseQuickAdapter.OnItemChildClickListener() {            @Override            public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {                if (view.getId() == R.id.btn2) {                    DemoBean.ItemsEntity itemsEntity = beans.get(position);                    //删除选择对话框                    MaterialDialogUtils.showBasicDialog(getContext(), "提示", "是否删除【" + itemsEntity.getName() + "】？ position：" + position)                            .onNegative(new MaterialDialog.SingleButtonCallback() {                                @Override                                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                                }                            }).onPositive(new MaterialDialog.SingleButtonCallback() {                        @Override                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                            viewModel.deleteItem(itemsEntity);//                            mAdapter.remove(position);                            mAdapter.notifyItemRemoved(position);                        }                    }).show();                }            }        });    }    @Override    public void initViewObservable() {        super.initViewObservable();        viewModel.liveData.observe(this, itemsEntities -> {            KLog.e("mLiveData的listBeans.size():" + itemsEntities.size());//            setBeautifulGirlImg(itemsEntities);  // 图片链接经常失效,设置美女图片,但每次上下拉头像会变;            if (viewModel.pageNum == 1) {                mAdapter.getData().clear(); // 请求多页数据后再请求第1页,先删除之前数据                if (itemsEntities.isEmpty()) {                    //  第一页无数据,就显示默认页                    showEmptyLayout(binding.refreshLayout,                            getActivity().getResources().getString(R.string.tip_a_page_no_data),                    R.mipmap.ic_launcher_mvvmsmart, false);                } else {                    showNormalLayout(binding.refreshLayout);                    mAdapter.addData(itemsEntities);                }            } else {                if (itemsEntities.isEmpty()) {                    ToastUtils.showLong("开发者--本页无数据");                    binding.refreshLayout.finishLoadMoreWithNoMoreData();                    binding.refreshLayout.setNoMoreData(true);                } else {                    mAdapter.addData(itemsEntities);                }            }        });        binding.refreshLayout.setOnRefreshListener(new OnRefreshListener() {            @Override            public void onRefresh(@NonNull RefreshLayout refreshLayout) {                viewModel.pageNum = 1;                viewModel.requestNetWork();            }        });        //上拉加载更多        binding.refreshLayout.setOnLoadMoreListener(refreshLayout -> {            viewModel.pageNum++;//            loadMoreTestData();   // 模拟加载更多数据            viewModel.requestNetWork();        });        /**         * 每个界面默认页效果不同         * 在这里可以动态替换 无网络页,数据错误页, 无数据默认页;         */        viewModel.stateLiveData.stateEnumMutableLiveData                .observe(this, stateEnum -> {                    if (stateEnum.equals(StateLiveData.StateEnum.Loading)) {                        binding.refreshLayout.finishRefresh();                        binding.refreshLayout.finishLoadMore();                        KLog.e("请求数据中--显示loading");                        showLoading("请求数据中...");                    }                    if (stateEnum.equals(StateLiveData.StateEnum.Success)) {                        binding.refreshLayout.finishRefresh();                        binding.refreshLayout.finishLoadMore();                        KLog.e("数据获取成功--关闭loading");                        dismissLoading();                    }                    if (stateEnum.equals(StateLiveData.StateEnum.Idle)) {                        KLog.e("空闲状态--关闭loading");                        binding.refreshLayout.finishRefresh();                        binding.refreshLayout.finishLoadMore();                        dismissLoading();                    }                });    }    private void setBeautifulGirlImg(List<DemoBean.ItemsEntity> itemsEntities) {        for (DemoBean.ItemsEntity itemsEntity : itemsEntities) {            itemsEntity.setImg(TestUtils.GetGirlImgUrl());        }    }}